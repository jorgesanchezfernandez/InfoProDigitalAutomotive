// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using infoproDigitalTechTask.Models.DBContext;

#nullable disable

namespace infoproDigitalTechTask.Migrations
{
    [DbContext(typeof(QuoteManagementDBContext))]
    [Migration("20241028004907_InitialDbMigration")]
    partial class InitialDbMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("infoproDigitalTechTask.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCustomerAuthorized")
                        .HasColumnType("bit");

                    b.Property<string>("JobCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LabourRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LabourTime")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceOverride")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("infoproDigitalTechTask.Models.Part", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("PartDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("Part");

                    b.HasDiscriminator<string>("PartType").HasValue("Part");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("infoproDigitalTechTask.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("VehicleDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vrm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("infoproDigitalTechTask.Models.FluidPart", b =>
                {
                    b.HasBaseType("infoproDigitalTechTask.Models.Part");

                    b.HasDiscriminator().HasValue("Fluid");
                });

            modelBuilder.Entity("infoproDigitalTechTask.Models.MechanicalPart", b =>
                {
                    b.HasBaseType("infoproDigitalTechTask.Models.Part");

                    b.HasDiscriminator().HasValue("Mechanical");
                });

            modelBuilder.Entity("infoproDigitalTechTask.Models.Job", b =>
                {
                    b.HasOne("infoproDigitalTechTask.Models.Quote", "Quote")
                        .WithMany("Jobs")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("infoproDigitalTechTask.Models.Part", b =>
                {
                    b.HasOne("infoproDigitalTechTask.Models.Job", "Job")
                        .WithMany("Parts")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("infoproDigitalTechTask.Models.Job", b =>
                {
                    b.Navigation("Parts");
                });

            modelBuilder.Entity("infoproDigitalTechTask.Models.Quote", b =>
                {
                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
